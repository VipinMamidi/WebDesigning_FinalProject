{"ast":null,"code":"import { USER_LOGIN_REQUEST, USER_LOGIN_SUCCESS, USER_LOGIN_FAILURE, USER_LOGIN_REFRESH_REQUEST, USER_LOGIN_REFRESH_SUCCESS, USER_LOGIN_REFRESH_FAILURE, USER_LOGOUT, USER_REGISTER_REQUEST, USER_REGISTER_SUCCESS, USER_REGISTER_FAILURE, USER_RESET_PASSWORD_REQUEST, USER_RESET_PASSWORD_SUCCESS, USER_RESET_PASSWORD_FAILURE, USER_EMAIL_VERIFICATION_REQUEST, USER_EMAIL_VERIFICATION_SUCCESS, USER_EMAIL_VERIFICATION_FAILURE, USER_CONFIRM_REQUEST, USER_CONFIRM_SUCCESS, USER_CONFIRM_FAILURE, USER_DETAILS_REQUEST, USER_DETAILS_SUCCESS, USER_DETAILS_FAILURE, USER_DETAILS_RESET, USER_PROFILE_UPDATE_REQUEST, USER_PROFILE_UPDATE_SUCCESS, USER_PROFILE_UPDATE_FAILURE, USER_LIST_REQUEST, USER_LIST_SUCCESS, USER_LIST_FAILURE, USER_DELETE_REQUEST, USER_DELETE_SUCCESS, USER_DELETE_FAILURE, USER_UPDATE_REQUEST, USER_UPDATE_SUCCESS, USER_UPDATE_FAILURE } from '../constants/userConstants';\nimport { ORDER_CREATE_RESET, ORDER_USER_LIST_RESET } from '../constants/orderConstants';\nimport axios from 'axios'; // login an user, can be a social login or a normal email verified login\n\nexport const loginUser = (email, password) => async dispatch => {\n  try {\n    dispatch({\n      type: USER_LOGIN_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.post('/api/users/login', {\n      email,\n      password\n    }, config);\n    dispatch({\n      type: USER_LOGIN_SUCCESS,\n      payload: { ...data,\n        isSocialLogin: false\n      }\n    });\n    dispatch({\n      type: USER_LOGIN_REFRESH_SUCCESS,\n      payload: data.refreshToken\n    }); // store the refresh token and the rest of the user info in the local storage\n\n    localStorage.setItem('refreshToken', data.refreshToken);\n    localStorage.setItem('userInfo', JSON.stringify({ ...data,\n      isSocialLogin: false\n    })); // remove the variable that helps prompt the user that email is not verified, each time they login\n\n    localStorage.removeItem('promptEmailVerfication');\n  } catch (error) {\n    dispatch({\n      type: USER_LOGIN_FAILURE,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n}; // used for refreshing the access tokens when the user logs in using email and password\n\nexport const refreshLogin = email => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_LOGIN_REFRESH_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState(); // avoid this if social login\n\n    if (userInfo.isSocialLogin) {\n      dispatch({\n        type: USER_LOGIN_REFRESH_SUCCESS,\n        payload: null\n      });\n    } else {\n      const config = {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      };\n      const {\n        data\n      } = await axios.post('/api/users/refresh', {\n        email,\n        token: userInfo.refreshToken\n      }, config);\n\n      if (data.success) {\n        dispatch({\n          type: USER_LOGIN_REFRESH_SUCCESS,\n          payload: data\n        });\n        const updatedUser = { ...userInfo,\n          accessToken: data.accessToken,\n          refreshToken: userInfo.refreshToken\n        }; // update the local storage\n\n        localStorage.setItem('userInfo', JSON.stringify(updatedUser));\n        dispatch({\n          type: USER_LOGIN_SUCCESS,\n          payload: updatedUser\n        });\n      } else if (!data.success) {\n        // set a variable in local storage which redirects to login page, if this refresh thing fails\n        localStorage.removeItem('userInfo');\n        localStorage.setItem('redirectLogin', 'true'); // after refresh token also expires, redirect to login page after loggin out the user\n\n        dispatch({\n          type: USER_LOGOUT\n        });\n      }\n    }\n  } catch (error) {\n    dispatch({\n      type: USER_LOGIN_REFRESH_FAILURE,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n}; // logout by removing all local storage info\n\nexport const logoutUser = () => dispatch => {\n  localStorage.removeItem('userInfo');\n  localStorage.removeItem('redirectLogin');\n  localStorage.removeItem('cartItems');\n  dispatch({\n    type: USER_LOGOUT\n  });\n  dispatch({\n    type: USER_DETAILS_RESET\n  });\n  dispatch({\n    type: ORDER_CREATE_RESET\n  });\n  dispatch({\n    type: ORDER_USER_LIST_RESET\n  });\n}; // register a new user with the form for name, email, password\n\nexport const registerUser = (name, email, password) => async dispatch => {\n  try {\n    dispatch({\n      type: USER_REGISTER_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.post('/api/users/', {\n      name,\n      email,\n      password\n    }, config);\n    dispatch({\n      type: USER_REGISTER_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: USER_REGISTER_FAILURE,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n}; // send an email for verification of the newly registered account\n\nexport const sendVerficationEmail = email => async dispatch => {\n  try {\n    dispatch({\n      type: USER_EMAIL_VERIFICATION_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.post('/api/users/confirm', {\n      email\n    }, config);\n    dispatch({\n      type: USER_EMAIL_VERIFICATION_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: USER_EMAIL_VERIFICATION_FAILURE,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n}; // take the email token sent from the mail, and confirm the account once the link is clicked\n\nexport const confirmUser = function (emailToken) {\n  let alreadyLoggedIn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  return async (dispatch, getState) => {\n    try {\n      dispatch({\n        type: USER_CONFIRM_REQUEST\n      });\n      const {\n        data\n      } = await axios.get(`/api/users/confirm/${emailToken}`); // remove variable meant to prompt the user for email verification\n\n      localStorage.removeItem('promptEmailVerfication');\n      dispatch({\n        type: USER_CONFIRM_SUCCESS,\n        payload: true\n      });\n\n      if (alreadyLoggedIn) {\n        dispatch({\n          type: USER_LOGIN_SUCCESS,\n          payload: data\n        });\n        dispatch({\n          type: USER_LOGIN_REFRESH_SUCCESS,\n          payload: data.refreshToken\n        });\n        localStorage.setItem('refreshToken', data.refreshToken);\n        localStorage.setItem('userInfo', JSON.stringify(data));\n      }\n\n      localStorage.removeItem('promptEmailVerfication');\n    } catch (error) {\n      dispatch({\n        type: USER_CONFIRM_FAILURE,\n        payload: error.response && error.response.data.message ? error.response.data.message : error.message\n      });\n    }\n  };\n}; // reset the user password and send one more verification email from the server\n\nexport const resetUserPassword = (passwordToken, password) => async dispatch => {\n  try {\n    dispatch({\n      type: USER_RESET_PASSWORD_REQUEST\n    }); // make the api call to reset the password\n\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.put('/api/users/reset', {\n      passwordToken,\n      password\n    }, config);\n    dispatch({\n      type: USER_RESET_PASSWORD_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: USER_RESET_PASSWORD_FAILURE,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n}; // get user details for profile page\n\nexport const getUserDetails = id => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_DETAILS_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n\n    if (userInfo.isSocialLogin) {\n      const config = {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      };\n      let {\n        data\n      } = await axios.post('/api/users/passport/data/', {\n        id\n      }, config);\n      dispatch({\n        type: USER_DETAILS_SUCCESS,\n        payload: { ...data,\n          isSocialLogin: true\n        }\n      });\n    } else {\n      const config = {\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${userInfo.accessToken}`\n        }\n      };\n      const {\n        data\n      } = await axios.get(`/api/users/${id}`, config);\n      dispatch({\n        type: USER_DETAILS_SUCCESS,\n        payload: { ...data,\n          isSocialLogin: false\n        }\n      });\n    }\n  } catch (error) {\n    dispatch({\n      type: USER_DETAILS_FAILURE,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n}; // update details in the user profile page\n\nexport const updateUserProfile = user => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_PROFILE_UPDATE_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState(); // different headers are used when it is a social login, and when it is a std email login\n\n    const config = userInfo.isSocialLogin ? {\n      headers: {\n        Authorization: `SocialLogin ${userInfo.id}`\n      }\n    } : {\n      headers: {\n        Authorization: `Bearer ${userInfo.accessToken}`\n      }\n    };\n    const isSocial = userInfo.isSocialLogin;\n    const {\n      data\n    } = await axios.put('/api/users/profile', user, config);\n    dispatch({\n      type: USER_PROFILE_UPDATE_SUCCESS,\n      payload: { ...data,\n        isSocialLogin: isSocial\n      }\n    }); // login the user after updating the information\n\n    dispatch({\n      type: USER_LOGIN_SUCCESS,\n      payload: { ...data,\n        isSocialLogin: isSocial\n      }\n    });\n    localStorage.setItem('userInfo', JSON.stringify({ ...data,\n      isSocialLogin: isSocial\n    }));\n  } catch (error) {\n    dispatch({\n      type: USER_PROFILE_UPDATE_FAILURE,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n}; // fetch a list of all users, for the admin panel view\n\nexport const listAllUsers = function () {\n  let pageNumber = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  return async (dispatch, getState) => {\n    try {\n      dispatch({\n        type: USER_LIST_REQUEST\n      });\n      const {\n        userLogin: {\n          userInfo\n        }\n      } = getState(); // different headers are used when it is a social login, and when it is a std email login\n\n      const config = userInfo.isSocialLogin ? {\n        headers: {\n          Authorization: `SocialLogin ${userInfo.id}`\n        }\n      } : {\n        headers: {\n          Authorization: `Bearer ${userInfo.accessToken}`\n        }\n      };\n      const {\n        data\n      } = await axios.get(`/api/users?pageNumber=${pageNumber}`, config);\n      dispatch({\n        type: USER_LIST_SUCCESS,\n        payload: data\n      });\n    } catch (error) {\n      dispatch({\n        type: USER_LIST_FAILURE,\n        payload: error.response && error.response.data.message ? error.response.data.message : error.message\n      });\n    }\n  };\n}; // delete the user from the admin panel view\n\nexport const deleteUser = id => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_DELETE_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState(); // different headers are used when it is a social login, and when it is a std email login\n\n    const config = userInfo.isSocialLogin ? {\n      headers: {\n        Authorization: `SocialLogin ${userInfo.id}`\n      }\n    } : {\n      headers: {\n        Authorization: `Bearer ${userInfo.accessToken}`\n      }\n    };\n    await axios.delete(`/api/users/${id}`, config);\n    dispatch({\n      type: USER_DELETE_SUCCESS\n    });\n  } catch (error) {\n    dispatch({\n      type: USER_DELETE_FAILURE,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n}; // update the user details\n\nexport const updateUser = user => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_UPDATE_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = userInfo.isSocialLogin ? {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `SocialLogin ${userInfo.id}`\n      }\n    } : {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${userInfo.accessToken}`\n      }\n    };\n    const isSocial = userInfo.isSocialLogin;\n    const {\n      data\n    } = await axios.put(`/api/users/${user._id}`, user, config);\n    dispatch({\n      type: USER_UPDATE_SUCCESS\n    });\n    dispatch({\n      type: USER_DETAILS_SUCCESS,\n      payload: { ...data,\n        isSocialLogin: isSocial\n      }\n    });\n\n    if (data.id === userInfo.id) {\n      // // login the user after updating the information\n      const newUserInfo = { ...userInfo,\n        ...userInfo,\n        id: data.id,\n        name: data.name,\n        email: data.email,\n        isAdmin: data.isAdmin,\n        isConfirmed: data.isConfirmed\n      };\n      dispatch({\n        type: USER_LOGIN_SUCCESS,\n        payload: newUserInfo\n      });\n      localStorage.setItem('userInfo', JSON.stringify(newUserInfo));\n    }\n  } catch (error) {\n    dispatch({\n      type: USER_UPDATE_FAILURE,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};","map":{"version":3,"sources":["/Users/vipinmamidi/NEU/2nd SEM/WEB D/FP/Thu/MERN-Ecommerce/MERN-Ecommerce/frontend/src/actions/userActions.js"],"names":["USER_LOGIN_REQUEST","USER_LOGIN_SUCCESS","USER_LOGIN_FAILURE","USER_LOGIN_REFRESH_REQUEST","USER_LOGIN_REFRESH_SUCCESS","USER_LOGIN_REFRESH_FAILURE","USER_LOGOUT","USER_REGISTER_REQUEST","USER_REGISTER_SUCCESS","USER_REGISTER_FAILURE","USER_RESET_PASSWORD_REQUEST","USER_RESET_PASSWORD_SUCCESS","USER_RESET_PASSWORD_FAILURE","USER_EMAIL_VERIFICATION_REQUEST","USER_EMAIL_VERIFICATION_SUCCESS","USER_EMAIL_VERIFICATION_FAILURE","USER_CONFIRM_REQUEST","USER_CONFIRM_SUCCESS","USER_CONFIRM_FAILURE","USER_DETAILS_REQUEST","USER_DETAILS_SUCCESS","USER_DETAILS_FAILURE","USER_DETAILS_RESET","USER_PROFILE_UPDATE_REQUEST","USER_PROFILE_UPDATE_SUCCESS","USER_PROFILE_UPDATE_FAILURE","USER_LIST_REQUEST","USER_LIST_SUCCESS","USER_LIST_FAILURE","USER_DELETE_REQUEST","USER_DELETE_SUCCESS","USER_DELETE_FAILURE","USER_UPDATE_REQUEST","USER_UPDATE_SUCCESS","USER_UPDATE_FAILURE","ORDER_CREATE_RESET","ORDER_USER_LIST_RESET","axios","loginUser","email","password","dispatch","type","config","headers","data","post","payload","isSocialLogin","refreshToken","localStorage","setItem","JSON","stringify","removeItem","error","response","message","refreshLogin","getState","userLogin","userInfo","token","success","updatedUser","accessToken","logoutUser","registerUser","name","sendVerficationEmail","confirmUser","emailToken","alreadyLoggedIn","get","resetUserPassword","passwordToken","put","getUserDetails","id","Authorization","updateUserProfile","user","isSocial","listAllUsers","pageNumber","deleteUser","delete","updateUser","_id","newUserInfo","isAdmin","isConfirmed"],"mappings":"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","sourcesContent":["import {\r\n\tUSER_LOGIN_REQUEST,\r\n\tUSER_LOGIN_SUCCESS,\r\n\tUSER_LOGIN_FAILURE,\r\n\tUSER_LOGIN_REFRESH_REQUEST,\r\n\tUSER_LOGIN_REFRESH_SUCCESS,\r\n\tUSER_LOGIN_REFRESH_FAILURE,\r\n\tUSER_LOGOUT,\r\n\tUSER_REGISTER_REQUEST,\r\n\tUSER_REGISTER_SUCCESS,\r\n\tUSER_REGISTER_FAILURE,\r\n\tUSER_RESET_PASSWORD_REQUEST,\r\n\tUSER_RESET_PASSWORD_SUCCESS,\r\n\tUSER_RESET_PASSWORD_FAILURE,\r\n\tUSER_EMAIL_VERIFICATION_REQUEST,\r\n\tUSER_EMAIL_VERIFICATION_SUCCESS,\r\n\tUSER_EMAIL_VERIFICATION_FAILURE,\r\n\tUSER_CONFIRM_REQUEST,\r\n\tUSER_CONFIRM_SUCCESS,\r\n\tUSER_CONFIRM_FAILURE,\r\n\tUSER_DETAILS_REQUEST,\r\n\tUSER_DETAILS_SUCCESS,\r\n\tUSER_DETAILS_FAILURE,\r\n\tUSER_DETAILS_RESET,\r\n\tUSER_PROFILE_UPDATE_REQUEST,\r\n\tUSER_PROFILE_UPDATE_SUCCESS,\r\n\tUSER_PROFILE_UPDATE_FAILURE,\r\n\tUSER_LIST_REQUEST,\r\n\tUSER_LIST_SUCCESS,\r\n\tUSER_LIST_FAILURE,\r\n\tUSER_DELETE_REQUEST,\r\n\tUSER_DELETE_SUCCESS,\r\n\tUSER_DELETE_FAILURE,\r\n\tUSER_UPDATE_REQUEST,\r\n\tUSER_UPDATE_SUCCESS,\r\n\tUSER_UPDATE_FAILURE,\r\n} from '../constants/userConstants';\r\nimport {\r\n\tORDER_CREATE_RESET,\r\n\tORDER_USER_LIST_RESET,\r\n} from '../constants/orderConstants';\r\nimport axios from 'axios';\r\n\r\n// login an user, can be a social login or a normal email verified login\r\nexport const loginUser = (email, password) => async (dispatch) => {\r\n\ttry {\r\n\t\tdispatch({ type: USER_LOGIN_REQUEST });\r\n\r\n\t\tconst config = {\r\n\t\t\theaders: {\r\n\t\t\t\t'Content-Type': 'application/json',\r\n\t\t\t},\r\n\t\t};\r\n\r\n\t\tconst { data } = await axios.post(\r\n\t\t\t'/api/users/login',\r\n\t\t\t{ email, password },\r\n\t\t\tconfig\r\n\t\t);\r\n\r\n\t\tdispatch({\r\n\t\t\ttype: USER_LOGIN_SUCCESS,\r\n\t\t\tpayload: { ...data, isSocialLogin: false },\r\n\t\t});\r\n\t\tdispatch({\r\n\t\t\ttype: USER_LOGIN_REFRESH_SUCCESS,\r\n\t\t\tpayload: data.refreshToken,\r\n\t\t});\r\n\t\t// store the refresh token and the rest of the user info in the local storage\r\n\t\tlocalStorage.setItem('refreshToken', data.refreshToken);\r\n\t\tlocalStorage.setItem(\r\n\t\t\t'userInfo',\r\n\t\t\tJSON.stringify({ ...data, isSocialLogin: false })\r\n\t\t);\r\n\t\t// remove the variable that helps prompt the user that email is not verified, each time they login\r\n\t\tlocalStorage.removeItem('promptEmailVerfication');\r\n\t} catch (error) {\r\n\t\tdispatch({\r\n\t\t\ttype: USER_LOGIN_FAILURE,\r\n\t\t\tpayload:\r\n\t\t\t\terror.response && error.response.data.message\r\n\t\t\t\t\t? error.response.data.message\r\n\t\t\t\t\t: error.message,\r\n\t\t});\r\n\t}\r\n};\r\n\r\n// used for refreshing the access tokens when the user logs in using email and password\r\nexport const refreshLogin = (email) => async (dispatch, getState) => {\r\n\ttry {\r\n\t\tdispatch({ type: USER_LOGIN_REFRESH_REQUEST });\r\n\t\tconst {\r\n\t\t\tuserLogin: { userInfo },\r\n\t\t} = getState();\r\n\r\n\t\t// avoid this if social login\r\n\t\tif (userInfo.isSocialLogin) {\r\n\t\t\tdispatch({ type: USER_LOGIN_REFRESH_SUCCESS, payload: null });\r\n\t\t} else {\r\n\t\t\tconst config = {\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t'Content-Type': 'application/json',\r\n\t\t\t\t},\r\n\t\t\t};\r\n\r\n\t\t\tconst { data } = await axios.post(\r\n\t\t\t\t'/api/users/refresh',\r\n\t\t\t\t{\r\n\t\t\t\t\temail,\r\n\t\t\t\t\ttoken: userInfo.refreshToken,\r\n\t\t\t\t},\r\n\t\t\t\tconfig\r\n\t\t\t);\r\n\r\n\t\t\tif (data.success) {\r\n\t\t\t\tdispatch({ type: USER_LOGIN_REFRESH_SUCCESS, payload: data });\r\n\t\t\t\tconst updatedUser = {\r\n\t\t\t\t\t...userInfo,\r\n\t\t\t\t\taccessToken: data.accessToken,\r\n\t\t\t\t\trefreshToken: userInfo.refreshToken,\r\n\t\t\t\t};\r\n\t\t\t\t// update the local storage\r\n\t\t\t\tlocalStorage.setItem('userInfo', JSON.stringify(updatedUser));\r\n\t\t\t\tdispatch({ type: USER_LOGIN_SUCCESS, payload: updatedUser });\r\n\t\t\t} else if (!data.success) {\r\n\t\t\t\t// set a variable in local storage which redirects to login page, if this refresh thing fails\r\n\t\t\t\tlocalStorage.removeItem('userInfo');\r\n\t\t\t\tlocalStorage.setItem('redirectLogin', 'true'); // after refresh token also expires, redirect to login page after loggin out the user\r\n\t\t\t\tdispatch({ type: USER_LOGOUT });\r\n\t\t\t}\r\n\t\t}\r\n\t} catch (error) {\r\n\t\tdispatch({\r\n\t\t\ttype: USER_LOGIN_REFRESH_FAILURE,\r\n\t\t\tpayload:\r\n\t\t\t\terror.response && error.response.data.message\r\n\t\t\t\t\t? error.response.data.message\r\n\t\t\t\t\t: error.message,\r\n\t\t});\r\n\t}\r\n};\r\n\r\n// logout by removing all local storage info\r\nexport const logoutUser = () => (dispatch) => {\r\n\tlocalStorage.removeItem('userInfo');\r\n\tlocalStorage.removeItem('redirectLogin');\r\n\tlocalStorage.removeItem('cartItems');\r\n\tdispatch({ type: USER_LOGOUT });\r\n\tdispatch({ type: USER_DETAILS_RESET });\r\n\tdispatch({ type: ORDER_CREATE_RESET });\r\n\tdispatch({ type: ORDER_USER_LIST_RESET });\r\n};\r\n\r\n// register a new user with the form for name, email, password\r\nexport const registerUser = (name, email, password) => async (dispatch) => {\r\n\ttry {\r\n\t\tdispatch({ type: USER_REGISTER_REQUEST });\r\n\t\tconst config = {\r\n\t\t\theaders: {\r\n\t\t\t\t'Content-Type': 'application/json',\r\n\t\t\t},\r\n\t\t};\r\n\r\n\t\tconst { data } = await axios.post(\r\n\t\t\t'/api/users/',\r\n\t\t\t{ name, email, password },\r\n\t\t\tconfig\r\n\t\t);\r\n\r\n\t\tdispatch({ type: USER_REGISTER_SUCCESS, payload: data });\r\n\t} catch (error) {\r\n\t\tdispatch({\r\n\t\t\ttype: USER_REGISTER_FAILURE,\r\n\t\t\tpayload:\r\n\t\t\t\terror.response && error.response.data.message\r\n\t\t\t\t\t? error.response.data.message\r\n\t\t\t\t\t: error.message,\r\n\t\t});\r\n\t}\r\n};\r\n\r\n// send an email for verification of the newly registered account\r\nexport const sendVerficationEmail = (email) => async (dispatch) => {\r\n\ttry {\r\n\t\tdispatch({ type: USER_EMAIL_VERIFICATION_REQUEST });\r\n\t\tconst config = {\r\n\t\t\theaders: {\r\n\t\t\t\t'Content-Type': 'application/json',\r\n\t\t\t},\r\n\t\t};\r\n\r\n\t\tconst { data } = await axios.post(\r\n\t\t\t'/api/users/confirm',\r\n\t\t\t{ email },\r\n\t\t\tconfig\r\n\t\t);\r\n\t\tdispatch({ type: USER_EMAIL_VERIFICATION_SUCCESS, payload: data });\r\n\t} catch (error) {\r\n\t\tdispatch({\r\n\t\t\ttype: USER_EMAIL_VERIFICATION_FAILURE,\r\n\t\t\tpayload:\r\n\t\t\t\terror.response && error.response.data.message\r\n\t\t\t\t\t? error.response.data.message\r\n\t\t\t\t\t: error.message,\r\n\t\t});\r\n\t}\r\n};\r\n\r\n// take the email token sent from the mail, and confirm the account once the link is clicked\r\nexport const confirmUser =\r\n\t(emailToken, alreadyLoggedIn = false) =>\r\n\tasync (dispatch, getState) => {\r\n\t\ttry {\r\n\t\t\tdispatch({ type: USER_CONFIRM_REQUEST });\r\n\t\t\tconst { data } = await axios.get(\r\n\t\t\t\t`/api/users/confirm/${emailToken}`\r\n\t\t\t);\r\n\r\n\t\t\t// remove variable meant to prompt the user for email verification\r\n\t\t\tlocalStorage.removeItem('promptEmailVerfication');\r\n\t\t\tdispatch({ type: USER_CONFIRM_SUCCESS, payload: true });\r\n\r\n\t\t\tif (alreadyLoggedIn) {\r\n\t\t\t\tdispatch({ type: USER_LOGIN_SUCCESS, payload: data });\r\n\t\t\t\tdispatch({\r\n\t\t\t\t\ttype: USER_LOGIN_REFRESH_SUCCESS,\r\n\t\t\t\t\tpayload: data.refreshToken,\r\n\t\t\t\t});\r\n\t\t\t\tlocalStorage.setItem('refreshToken', data.refreshToken);\r\n\t\t\t\tlocalStorage.setItem('userInfo', JSON.stringify(data));\r\n\t\t\t}\r\n\r\n\t\t\tlocalStorage.removeItem('promptEmailVerfication');\r\n\t\t} catch (error) {\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: USER_CONFIRM_FAILURE,\r\n\t\t\t\tpayload:\r\n\t\t\t\t\terror.response && error.response.data.message\r\n\t\t\t\t\t\t? error.response.data.message\r\n\t\t\t\t\t\t: error.message,\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n\r\n// reset the user password and send one more verification email from the server\r\nexport const resetUserPassword =\r\n\t(passwordToken, password) => async (dispatch) => {\r\n\t\ttry {\r\n\t\t\tdispatch({ type: USER_RESET_PASSWORD_REQUEST });\r\n\r\n\t\t\t// make the api call to reset the password\r\n\t\t\tconst config = {\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t'Content-Type': 'application/json',\r\n\t\t\t\t},\r\n\t\t\t};\r\n\r\n\t\t\tconst { data } = await axios.put(\r\n\t\t\t\t'/api/users/reset',\r\n\t\t\t\t{ passwordToken, password },\r\n\t\t\t\tconfig\r\n\t\t\t);\r\n\r\n\t\t\tdispatch({ type: USER_RESET_PASSWORD_SUCCESS, payload: data });\r\n\t\t} catch (error) {\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: USER_RESET_PASSWORD_FAILURE,\r\n\t\t\t\tpayload:\r\n\t\t\t\t\terror.response && error.response.data.message\r\n\t\t\t\t\t\t? error.response.data.message\r\n\t\t\t\t\t\t: error.message,\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n\r\n// get user details for profile page\r\nexport const getUserDetails = (id) => async (dispatch, getState) => {\r\n\ttry {\r\n\t\tdispatch({ type: USER_DETAILS_REQUEST });\r\n\r\n\t\tconst {\r\n\t\t\tuserLogin: { userInfo },\r\n\t\t} = getState();\r\n\r\n\t\tif (userInfo.isSocialLogin) {\r\n\t\t\tconst config = {\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t'Content-Type': 'application/json',\r\n\t\t\t\t},\r\n\t\t\t};\r\n\r\n\t\t\tlet { data } = await axios.post(\r\n\t\t\t\t'/api/users/passport/data/',\r\n\t\t\t\t{ id },\r\n\t\t\t\tconfig\r\n\t\t\t);\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: USER_DETAILS_SUCCESS,\r\n\t\t\t\tpayload: { ...data, isSocialLogin: true },\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tconst config = {\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t'Content-Type': 'application/json',\r\n\t\t\t\t\tAuthorization: `Bearer ${userInfo.accessToken}`,\r\n\t\t\t\t},\r\n\t\t\t};\r\n\r\n\t\t\tconst { data } = await axios.get(`/api/users/${id}`, config);\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: USER_DETAILS_SUCCESS,\r\n\t\t\t\tpayload: { ...data, isSocialLogin: false },\r\n\t\t\t});\r\n\t\t}\r\n\t} catch (error) {\r\n\t\tdispatch({\r\n\t\t\ttype: USER_DETAILS_FAILURE,\r\n\t\t\tpayload:\r\n\t\t\t\terror.response && error.response.data.message\r\n\t\t\t\t\t? error.response.data.message\r\n\t\t\t\t\t: error.message,\r\n\t\t});\r\n\t}\r\n};\r\n\r\n// update details in the user profile page\r\nexport const updateUserProfile = (user) => async (dispatch, getState) => {\r\n\ttry {\r\n\t\tdispatch({ type: USER_PROFILE_UPDATE_REQUEST });\r\n\r\n\t\tconst {\r\n\t\t\tuserLogin: { userInfo },\r\n\t\t} = getState();\r\n\r\n\t\t// different headers are used when it is a social login, and when it is a std email login\r\n\t\tconst config = userInfo.isSocialLogin\r\n\t\t\t? {\r\n\t\t\t\t\theaders: {\r\n\t\t\t\t\t\tAuthorization: `SocialLogin ${userInfo.id}`,\r\n\t\t\t\t\t},\r\n\t\t\t  }\r\n\t\t\t: {\r\n\t\t\t\t\theaders: {\r\n\t\t\t\t\t\tAuthorization: `Bearer ${userInfo.accessToken}`,\r\n\t\t\t\t\t},\r\n\t\t\t  };\r\n\r\n\t\tconst isSocial = userInfo.isSocialLogin;\r\n\t\tconst { data } = await axios.put('/api/users/profile', user, config);\r\n\r\n\t\tdispatch({\r\n\t\t\ttype: USER_PROFILE_UPDATE_SUCCESS,\r\n\t\t\tpayload: { ...data, isSocialLogin: isSocial },\r\n\t\t});\r\n\r\n\t\t// login the user after updating the information\r\n\t\tdispatch({\r\n\t\t\ttype: USER_LOGIN_SUCCESS,\r\n\t\t\tpayload: { ...data, isSocialLogin: isSocial },\r\n\t\t});\r\n\r\n\t\tlocalStorage.setItem(\r\n\t\t\t'userInfo',\r\n\t\t\tJSON.stringify({ ...data, isSocialLogin: isSocial })\r\n\t\t);\r\n\t} catch (error) {\r\n\t\tdispatch({\r\n\t\t\ttype: USER_PROFILE_UPDATE_FAILURE,\r\n\t\t\tpayload:\r\n\t\t\t\terror.response && error.response.data.message\r\n\t\t\t\t\t? error.response.data.message\r\n\t\t\t\t\t: error.message,\r\n\t\t});\r\n\t}\r\n};\r\n\r\n// fetch a list of all users, for the admin panel view\r\nexport const listAllUsers =\r\n\t(pageNumber = '') =>\r\n\tasync (dispatch, getState) => {\r\n\t\ttry {\r\n\t\t\tdispatch({ type: USER_LIST_REQUEST });\r\n\r\n\t\t\tconst {\r\n\t\t\t\tuserLogin: { userInfo },\r\n\t\t\t} = getState();\r\n\r\n\t\t\t// different headers are used when it is a social login, and when it is a std email login\r\n\t\t\tconst config = userInfo.isSocialLogin\r\n\t\t\t\t? {\r\n\t\t\t\t\t\theaders: {\r\n\t\t\t\t\t\t\tAuthorization: `SocialLogin ${userInfo.id}`,\r\n\t\t\t\t\t\t},\r\n\t\t\t\t  }\r\n\t\t\t\t: {\r\n\t\t\t\t\t\theaders: {\r\n\t\t\t\t\t\t\tAuthorization: `Bearer ${userInfo.accessToken}`,\r\n\t\t\t\t\t\t},\r\n\t\t\t\t  };\r\n\r\n\t\t\tconst { data } = await axios.get(\r\n\t\t\t\t`/api/users?pageNumber=${pageNumber}`,\r\n\t\t\t\tconfig\r\n\t\t\t);\r\n\r\n\t\t\tdispatch({ type: USER_LIST_SUCCESS, payload: data });\r\n\t\t} catch (error) {\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: USER_LIST_FAILURE,\r\n\t\t\t\tpayload:\r\n\t\t\t\t\terror.response && error.response.data.message\r\n\t\t\t\t\t\t? error.response.data.message\r\n\t\t\t\t\t\t: error.message,\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n\r\n// delete the user from the admin panel view\r\nexport const deleteUser = (id) => async (dispatch, getState) => {\r\n\ttry {\r\n\t\tdispatch({ type: USER_DELETE_REQUEST });\r\n\r\n\t\tconst {\r\n\t\t\tuserLogin: { userInfo },\r\n\t\t} = getState();\r\n\r\n\t\t// different headers are used when it is a social login, and when it is a std email login\r\n\t\tconst config = userInfo.isSocialLogin\r\n\t\t\t? {\r\n\t\t\t\t\theaders: {\r\n\t\t\t\t\t\tAuthorization: `SocialLogin ${userInfo.id}`,\r\n\t\t\t\t\t},\r\n\t\t\t  }\r\n\t\t\t: {\r\n\t\t\t\t\theaders: {\r\n\t\t\t\t\t\tAuthorization: `Bearer ${userInfo.accessToken}`,\r\n\t\t\t\t\t},\r\n\t\t\t  };\r\n\r\n\t\tawait axios.delete(`/api/users/${id}`, config);\r\n\r\n\t\tdispatch({ type: USER_DELETE_SUCCESS });\r\n\t} catch (error) {\r\n\t\tdispatch({\r\n\t\t\ttype: USER_DELETE_FAILURE,\r\n\t\t\tpayload:\r\n\t\t\t\terror.response && error.response.data.message\r\n\t\t\t\t\t? error.response.data.message\r\n\t\t\t\t\t: error.message,\r\n\t\t});\r\n\t}\r\n};\r\n\r\n// update the user details\r\nexport const updateUser = (user) => async (dispatch, getState) => {\r\n\ttry {\r\n\t\tdispatch({ type: USER_UPDATE_REQUEST });\r\n\r\n\t\tconst {\r\n\t\t\tuserLogin: { userInfo },\r\n\t\t} = getState();\r\n\r\n\t\tconst config = userInfo.isSocialLogin\r\n\t\t\t? {\r\n\t\t\t\t\theaders: {\r\n\t\t\t\t\t\t'Content-Type': 'application/json',\r\n\t\t\t\t\t\tAuthorization: `SocialLogin ${userInfo.id}`,\r\n\t\t\t\t\t},\r\n\t\t\t  }\r\n\t\t\t: {\r\n\t\t\t\t\theaders: {\r\n\t\t\t\t\t\t'Content-Type': 'application/json',\r\n\t\t\t\t\t\tAuthorization: `Bearer ${userInfo.accessToken}`,\r\n\t\t\t\t\t},\r\n\t\t\t  };\r\n\r\n\t\tconst isSocial = userInfo.isSocialLogin;\r\n\t\tconst { data } = await axios.put(\r\n\t\t\t`/api/users/${user._id}`,\r\n\t\t\tuser,\r\n\t\t\tconfig\r\n\t\t);\r\n\r\n\t\tdispatch({ type: USER_UPDATE_SUCCESS });\r\n\t\tdispatch({\r\n\t\t\ttype: USER_DETAILS_SUCCESS,\r\n\t\t\tpayload: { ...data, isSocialLogin: isSocial },\r\n\t\t});\r\n\r\n\t\tif (data.id === userInfo.id) {\r\n\t\t\t// // login the user after updating the information\r\n\t\t\tconst newUserInfo = {\r\n\t\t\t\t...userInfo,\r\n\t\t\t\t...userInfo,\r\n\t\t\t\tid: data.id,\r\n\t\t\t\tname: data.name,\r\n\t\t\t\temail: data.email,\r\n\t\t\t\tisAdmin: data.isAdmin,\r\n\t\t\t\tisConfirmed: data.isConfirmed,\r\n\t\t\t};\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: USER_LOGIN_SUCCESS,\r\n\t\t\t\tpayload: newUserInfo,\r\n\t\t\t});\r\n\r\n\t\t\tlocalStorage.setItem('userInfo', JSON.stringify(newUserInfo));\r\n\t\t}\r\n\t} catch (error) {\r\n\t\tdispatch({\r\n\t\t\ttype: USER_UPDATE_FAILURE,\r\n\t\t\tpayload:\r\n\t\t\t\terror.response && error.response.data.message\r\n\t\t\t\t\t? error.response.data.message\r\n\t\t\t\t\t: error.message,\r\n\t\t});\r\n\t}\r\n};\r\n"]},"metadata":{},"sourceType":"module"}