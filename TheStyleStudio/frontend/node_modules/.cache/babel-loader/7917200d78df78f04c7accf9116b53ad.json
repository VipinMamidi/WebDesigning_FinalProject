{"ast":null,"code":"import { ORDER_CREATE_REQUEST, ORDER_CREATE_SUCCESS, ORDER_CREATE_FAILURE, ORDER_DETAILS_REQUEST, ORDER_DETAILS_SUCCESS, ORDER_DETAILS_FAILURE, ORDER_PAY_REQUEST, ORDER_PAY_SUCCESS, ORDER_PAY_FAILURE, ORDER_DELIVER_REQUEST, ORDER_DELIVER_SUCCESS, ORDER_DELIVER_FAILURE, ORDER_USER_LIST_REQUEST, ORDER_USER_LIST_SUCCESS, ORDER_USER_LIST_FAILURE, ORDER_ALL_LIST_REQUEST, ORDER_ALL_LIST_SUCCESS, ORDER_ALL_LIST_FAILURE } from '../constants/orderConstants';\nimport axios from 'axios'; // get all the details about the order and dispatch only of currently logged in\n\nexport const createOrder = order => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: ORDER_CREATE_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState(); // different headers are used when it is a social login, and when it is a std email login\n\n    const config = userInfo.isSocialLogin ? {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `SocialLogin ${userInfo.id}`\n      }\n    } : {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${userInfo.accessToken}`\n      }\n    };\n    const {\n      data\n    } = await axios.post('/api/orders/', order, config);\n    dispatch({\n      type: ORDER_CREATE_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: ORDER_CREATE_FAILURE,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n}; // get details about a particular order\n\nexport const getOrderDetails = orderID => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: ORDER_DETAILS_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState(); // different headers are used when it is a social login, and when it is a std email login\n\n    const config = userInfo.isSocialLogin ? {\n      headers: {\n        Authorization: `SocialLogin ${userInfo.id}`\n      }\n    } : {\n      headers: {\n        Authorization: `Bearer ${userInfo.accessToken}`\n      }\n    };\n    const {\n      data\n    } = await axios.get(`/api/orders/${orderID}`, config);\n    dispatch({\n      type: ORDER_DETAILS_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: ORDER_DETAILS_FAILURE,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n}; // update the current order to that of a paid one, and store the correct payment result\n\nexport const payOrder = (orderID, paymentResult) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: ORDER_PAY_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState(); // different headers are used when it is a social login, and when it is a std email login\n\n    const config = userInfo.isSocialLogin ? {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `SocialLogin ${userInfo.id}`\n      }\n    } : {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${userInfo.accessToken}`\n      }\n    };\n    const {\n      data\n    } = await axios.put(`/api/orders/${orderID}/pay`, paymentResult, config);\n    dispatch({\n      type: ORDER_PAY_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: ORDER_PAY_FAILURE,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n}; // Set the current order as delivered, only when logged in user is an admin\n\nexport const deliverOrder = orderID => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: ORDER_DELIVER_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = userInfo.isSocialLogin ? {\n      headers: {\n        Authorization: `SocialLogin ${userInfo.id}`\n      }\n    } : {\n      headers: {\n        Authorization: `Bearer ${userInfo.accessToken}`\n      }\n    };\n    const {\n      data\n    } = await axios.put(`/api/orders/${orderID}/deliver`, {}, config);\n    dispatch({\n      type: ORDER_DELIVER_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: ORDER_DELIVER_FAILURE,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n}; // list all the orders of a particular user\n\nexport const listMyOrders = () => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: ORDER_USER_LIST_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState(); // different headers are used when it is a social login, and when it is a std email login\n\n    const config = userInfo.isSocialLogin ? {\n      headers: {\n        Authorization: `SocialLogin ${userInfo.id}`\n      }\n    } : {\n      headers: {\n        Authorization: `Bearer ${userInfo.accessToken}`\n      }\n    };\n    const {\n      data\n    } = await axios.get(`/api/orders/myorders`, config);\n    dispatch({\n      type: ORDER_USER_LIST_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: ORDER_USER_LIST_FAILURE,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n}; // list all orders for the admin panel view, include the pagenumber being fetched\n\nexport const listAllOrders = function () {\n  let pageNumber = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  return async (dispatch, getState) => {\n    try {\n      dispatch({\n        type: ORDER_ALL_LIST_REQUEST\n      });\n      const {\n        userLogin: {\n          userInfo\n        }\n      } = getState(); // different headers are used when it is a social login, and when it is a std email login\n\n      const config = userInfo.isSocialLogin ? {\n        headers: {\n          Authorization: `SocialLogin ${userInfo.id}`\n        }\n      } : {\n        headers: {\n          Authorization: `Bearer ${userInfo.accessToken}`\n        }\n      };\n      const {\n        data\n      } = await axios.get(`/api/orders?pageNumber=${pageNumber}`, config);\n      dispatch({\n        type: ORDER_ALL_LIST_SUCCESS,\n        payload: data\n      });\n    } catch (error) {\n      dispatch({\n        type: ORDER_ALL_LIST_FAILURE,\n        payload: error.response && error.response.data.message ? error.response.data.message : error.message\n      });\n    }\n  };\n};","map":{"version":3,"sources":["/Users/riddhibhatti/Webdesign/WebDFinalProject/WebDesigning_FinalProject/TheStyleStudio/frontend/src/actions/orderActions.js"],"names":["ORDER_CREATE_REQUEST","ORDER_CREATE_SUCCESS","ORDER_CREATE_FAILURE","ORDER_DETAILS_REQUEST","ORDER_DETAILS_SUCCESS","ORDER_DETAILS_FAILURE","ORDER_PAY_REQUEST","ORDER_PAY_SUCCESS","ORDER_PAY_FAILURE","ORDER_DELIVER_REQUEST","ORDER_DELIVER_SUCCESS","ORDER_DELIVER_FAILURE","ORDER_USER_LIST_REQUEST","ORDER_USER_LIST_SUCCESS","ORDER_USER_LIST_FAILURE","ORDER_ALL_LIST_REQUEST","ORDER_ALL_LIST_SUCCESS","ORDER_ALL_LIST_FAILURE","axios","createOrder","order","dispatch","getState","type","userLogin","userInfo","config","isSocialLogin","headers","Authorization","id","accessToken","data","post","payload","error","response","message","getOrderDetails","orderID","get","payOrder","paymentResult","put","deliverOrder","listMyOrders","listAllOrders","pageNumber"],"mappings":"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","sourcesContent":["import {\r\n\tORDER_CREATE_REQUEST,\r\n\tORDER_CREATE_SUCCESS,\r\n\tORDER_CREATE_FAILURE,\r\n\tORDER_DETAILS_REQUEST,\r\n\tORDER_DETAILS_SUCCESS,\r\n\tORDER_DETAILS_FAILURE,\r\n\tORDER_PAY_REQUEST,\r\n\tORDER_PAY_SUCCESS,\r\n\tORDER_PAY_FAILURE,\r\n\tORDER_DELIVER_REQUEST,\r\n\tORDER_DELIVER_SUCCESS,\r\n\tORDER_DELIVER_FAILURE,\r\n\tORDER_USER_LIST_REQUEST,\r\n\tORDER_USER_LIST_SUCCESS,\r\n\tORDER_USER_LIST_FAILURE,\r\n\tORDER_ALL_LIST_REQUEST,\r\n\tORDER_ALL_LIST_SUCCESS,\r\n\tORDER_ALL_LIST_FAILURE,\r\n} from '../constants/orderConstants';\r\n\r\nimport axios from 'axios';\r\n\r\n// get all the details about the order and dispatch only of currently logged in\r\nexport const createOrder = (order) => async (dispatch, getState) => {\r\n\ttry {\r\n\t\tdispatch({ type: ORDER_CREATE_REQUEST });\r\n\r\n\t\tconst {\r\n\t\t\tuserLogin: { userInfo },\r\n\t\t} = getState();\r\n\r\n\t\t// different headers are used when it is a social login, and when it is a std email login\r\n\t\tconst config = userInfo.isSocialLogin\r\n\t\t\t? {\r\n\t\t\t\t\theaders: {\r\n\t\t\t\t\t\t'Content-Type': 'application/json',\r\n\t\t\t\t\t\tAuthorization: `SocialLogin ${userInfo.id}`,\r\n\t\t\t\t\t},\r\n\t\t\t  }\r\n\t\t\t: {\r\n\t\t\t\t\theaders: {\r\n\t\t\t\t\t\t'Content-Type': 'application/json',\r\n\t\t\t\t\t\tAuthorization: `Bearer ${userInfo.accessToken}`,\r\n\t\t\t\t\t},\r\n\t\t\t  };\r\n\r\n\t\tconst { data } = await axios.post('/api/orders/', order, config);\r\n\r\n\t\tdispatch({ type: ORDER_CREATE_SUCCESS, payload: data });\r\n\t} catch (error) {\r\n\t\tdispatch({\r\n\t\t\ttype: ORDER_CREATE_FAILURE,\r\n\t\t\tpayload:\r\n\t\t\t\terror.response && error.response.data.message\r\n\t\t\t\t\t? error.response.data.message\r\n\t\t\t\t\t: error.message,\r\n\t\t});\r\n\t}\r\n};\r\n\r\n// get details about a particular order\r\nexport const getOrderDetails = (orderID) => async (dispatch, getState) => {\r\n\ttry {\r\n\t\tdispatch({ type: ORDER_DETAILS_REQUEST });\r\n\r\n\t\tconst {\r\n\t\t\tuserLogin: { userInfo },\r\n\t\t} = getState();\r\n\r\n\t\t// different headers are used when it is a social login, and when it is a std email login\r\n\t\tconst config = userInfo.isSocialLogin\r\n\t\t\t? {\r\n\t\t\t\t\theaders: {\r\n\t\t\t\t\t\tAuthorization: `SocialLogin ${userInfo.id}`,\r\n\t\t\t\t\t},\r\n\t\t\t  }\r\n\t\t\t: {\r\n\t\t\t\t\theaders: {\r\n\t\t\t\t\t\tAuthorization: `Bearer ${userInfo.accessToken}`,\r\n\t\t\t\t\t},\r\n\t\t\t  };\r\n\r\n\t\tconst { data } = await axios.get(`/api/orders/${orderID}`, config);\r\n\r\n\t\tdispatch({ type: ORDER_DETAILS_SUCCESS, payload: data });\r\n\t} catch (error) {\r\n\t\tdispatch({\r\n\t\t\ttype: ORDER_DETAILS_FAILURE,\r\n\t\t\tpayload:\r\n\t\t\t\terror.response && error.response.data.message\r\n\t\t\t\t\t? error.response.data.message\r\n\t\t\t\t\t: error.message,\r\n\t\t});\r\n\t}\r\n};\r\n\r\n// update the current order to that of a paid one, and store the correct payment result\r\nexport const payOrder =\r\n\t(orderID, paymentResult) => async (dispatch, getState) => {\r\n\t\ttry {\r\n\t\t\tdispatch({ type: ORDER_PAY_REQUEST });\r\n\r\n\t\t\tconst {\r\n\t\t\t\tuserLogin: { userInfo },\r\n\t\t\t} = getState();\r\n\r\n\t\t\t// different headers are used when it is a social login, and when it is a std email login\r\n\t\t\tconst config = userInfo.isSocialLogin\r\n\t\t\t\t? {\r\n\t\t\t\t\t\theaders: {\r\n\t\t\t\t\t\t\t'Content-Type': 'application/json',\r\n\t\t\t\t\t\t\tAuthorization: `SocialLogin ${userInfo.id}`,\r\n\t\t\t\t\t\t},\r\n\t\t\t\t  }\r\n\t\t\t\t: {\r\n\t\t\t\t\t\theaders: {\r\n\t\t\t\t\t\t\t'Content-Type': 'application/json',\r\n\t\t\t\t\t\t\tAuthorization: `Bearer ${userInfo.accessToken}`,\r\n\t\t\t\t\t\t},\r\n\t\t\t\t  };\r\n\r\n\t\t\tconst { data } = await axios.put(\r\n\t\t\t\t`/api/orders/${orderID}/pay`,\r\n\t\t\t\tpaymentResult,\r\n\t\t\t\tconfig\r\n\t\t\t);\r\n\r\n\t\t\tdispatch({ type: ORDER_PAY_SUCCESS, payload: data });\r\n\t\t} catch (error) {\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: ORDER_PAY_FAILURE,\r\n\t\t\t\tpayload:\r\n\t\t\t\t\terror.response && error.response.data.message\r\n\t\t\t\t\t\t? error.response.data.message\r\n\t\t\t\t\t\t: error.message,\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n\r\n// Set the current order as delivered, only when logged in user is an admin\r\nexport const deliverOrder = (orderID) => async (dispatch, getState) => {\r\n\ttry {\r\n\t\tdispatch({ type: ORDER_DELIVER_REQUEST });\r\n\r\n\t\tconst {\r\n\t\t\tuserLogin: { userInfo },\r\n\t\t} = getState();\r\n\r\n\t\tconst config = userInfo.isSocialLogin\r\n\t\t\t? {\r\n\t\t\t\t\theaders: {\r\n\t\t\t\t\t\tAuthorization: `SocialLogin ${userInfo.id}`,\r\n\t\t\t\t\t},\r\n\t\t\t  }\r\n\t\t\t: {\r\n\t\t\t\t\theaders: {\r\n\t\t\t\t\t\tAuthorization: `Bearer ${userInfo.accessToken}`,\r\n\t\t\t\t\t},\r\n\t\t\t  };\r\n\r\n\t\tconst { data } = await axios.put(\r\n\t\t\t`/api/orders/${orderID}/deliver`,\r\n\t\t\t{},\r\n\t\t\tconfig\r\n\t\t);\r\n\r\n\t\tdispatch({ type: ORDER_DELIVER_SUCCESS, payload: data });\r\n\t} catch (error) {\r\n\t\tdispatch({\r\n\t\t\ttype: ORDER_DELIVER_FAILURE,\r\n\t\t\tpayload:\r\n\t\t\t\terror.response && error.response.data.message\r\n\t\t\t\t\t? error.response.data.message\r\n\t\t\t\t\t: error.message,\r\n\t\t});\r\n\t}\r\n};\r\n\r\n// list all the orders of a particular user\r\nexport const listMyOrders = () => async (dispatch, getState) => {\r\n\ttry {\r\n\t\tdispatch({ type: ORDER_USER_LIST_REQUEST });\r\n\r\n\t\tconst {\r\n\t\t\tuserLogin: { userInfo },\r\n\t\t} = getState();\r\n\r\n\t\t// different headers are used when it is a social login, and when it is a std email login\r\n\t\tconst config = userInfo.isSocialLogin\r\n\t\t\t? {\r\n\t\t\t\t\theaders: {\r\n\t\t\t\t\t\tAuthorization: `SocialLogin ${userInfo.id}`,\r\n\t\t\t\t\t},\r\n\t\t\t  }\r\n\t\t\t: {\r\n\t\t\t\t\theaders: {\r\n\t\t\t\t\t\tAuthorization: `Bearer ${userInfo.accessToken}`,\r\n\t\t\t\t\t},\r\n\t\t\t  };\r\n\r\n\t\tconst { data } = await axios.get(`/api/orders/myorders`, config);\r\n\r\n\t\tdispatch({ type: ORDER_USER_LIST_SUCCESS, payload: data });\r\n\t} catch (error) {\r\n\t\tdispatch({\r\n\t\t\ttype: ORDER_USER_LIST_FAILURE,\r\n\t\t\tpayload:\r\n\t\t\t\terror.response && error.response.data.message\r\n\t\t\t\t\t? error.response.data.message\r\n\t\t\t\t\t: error.message,\r\n\t\t});\r\n\t}\r\n};\r\n\r\n// list all orders for the admin panel view, include the pagenumber being fetched\r\nexport const listAllOrders =\r\n\t(pageNumber = '') =>\r\n\tasync (dispatch, getState) => {\r\n\t\ttry {\r\n\t\t\tdispatch({ type: ORDER_ALL_LIST_REQUEST });\r\n\r\n\t\t\tconst {\r\n\t\t\t\tuserLogin: { userInfo },\r\n\t\t\t} = getState();\r\n\r\n\t\t\t// different headers are used when it is a social login, and when it is a std email login\r\n\t\t\tconst config = userInfo.isSocialLogin\r\n\t\t\t\t? {\r\n\t\t\t\t\t\theaders: {\r\n\t\t\t\t\t\t\tAuthorization: `SocialLogin ${userInfo.id}`,\r\n\t\t\t\t\t\t},\r\n\t\t\t\t  }\r\n\t\t\t\t: {\r\n\t\t\t\t\t\theaders: {\r\n\t\t\t\t\t\t\tAuthorization: `Bearer ${userInfo.accessToken}`,\r\n\t\t\t\t\t\t},\r\n\t\t\t\t  };\r\n\r\n\t\t\tconst { data } = await axios.get(\r\n\t\t\t\t`/api/orders?pageNumber=${pageNumber}`,\r\n\t\t\t\tconfig\r\n\t\t\t);\r\n\r\n\t\t\tdispatch({ type: ORDER_ALL_LIST_SUCCESS, payload: data });\r\n\t\t} catch (error) {\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: ORDER_ALL_LIST_FAILURE,\r\n\t\t\t\tpayload:\r\n\t\t\t\t\terror.response && error.response.data.message\r\n\t\t\t\t\t\t? error.response.data.message\r\n\t\t\t\t\t\t: error.message,\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n"]},"metadata":{},"sourceType":"module"}