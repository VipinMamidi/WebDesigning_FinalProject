{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Urvi\\\\Documents\\\\INFO6150\\\\MERN-Ecommerce\\\\MERN-Ecommerce\\\\frontend\\\\src\\\\pages\\\\ConfirmPage.js\",\n    _s = $RefreshSig$();\n\n/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { useState, useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\nimport { Card } from \"react-bootstrap\";\nimport Loader from \"../components/Loader\";\nimport Message from \"../components/Message\";\nimport { confirmUser } from \"../actions/userActions\";\nimport Meta from \"../components/Meta\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ConfirmPage = ({\n  match,\n  history\n}) => {\n  _s();\n\n  const dispatch = useDispatch();\n  const userConfirm = useSelector(state => state.userConfirm); // get the userInfo to check if user is confirmed or not\n\n  const {\n    loading,\n    error,\n    isConfirmed\n  } = userConfirm;\n  const userLogin = useSelector(state => state.userLogin);\n  const {\n    userInfo\n  } = userLogin;\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  useEffect(() => {\n    if (userInfo) {\n      setIsLoggedIn(true);\n    } else {\n      setIsLoggedIn(false);\n    }\n  }, []);\n  useEffect(() => {\n    // confirm user once the email token is available\n    dispatch(confirmUser(match.params.token, isLoggedIn));\n  }, [dispatch, match, isLoggedIn]);\n\n  if (loading || !isConfirmed && !error) {\n    return /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 12\n    }, this);\n  } else if (error) {\n    // redirect to login page after a 10 seconds\n    setTimeout(() => {\n      history.push(\"/login\");\n    }, 10000);\n    return /*#__PURE__*/_jsxDEV(Message, {\n      dismissible: true,\n      variant: \"danger\",\n      duration: 10,\n      children: \"Verfication Failed. Please try to login again.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this);\n  } else if (isConfirmed) {\n    // set a variable in local storage to fill email aftrer redirecting to login page after email confirmation\n    localStorage.setItem(\"fillEmailOnLoginPage\", \"true\");\n    return /*#__PURE__*/_jsxDEV(Card, {\n      style: {\n        border: \"none\",\n        margin: \"0 auto\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(Meta, {\n        title: \"Confirm Password | The Style Studio\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Card.Body, {\n        children: [/*#__PURE__*/_jsxDEV(Card.Title, {\n          children: \"Account Confirmed\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n          children: setIsLoggedIn ? \"Your account has been successfully verified! Go on and shop for the best deals of the day!\" : `Your account has been successfully verified! Please\n\t\t\t\t\t\tlogin and start exploring the best deals on all your\n\t\t\t\t\t\tfavorite products.`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, this), !setIsLoggedIn ? /*#__PURE__*/_jsxDEV(Link, {\n          to: \"/login\",\n          children: \"Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 29\n        }, this) : null]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this);\n  }\n};\n\n_s(ConfirmPage, \"fC5xXvy+swmGZ3y+bz0FSAl7hRM=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = ConfirmPage;\nexport default ConfirmPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"ConfirmPage\");","map":{"version":3,"sources":["C:/Users/Urvi/Documents/INFO6150/MERN-Ecommerce/MERN-Ecommerce/frontend/src/pages/ConfirmPage.js"],"names":["React","useState","useEffect","useSelector","useDispatch","Link","Card","Loader","Message","confirmUser","Meta","ConfirmPage","match","history","dispatch","userConfirm","state","loading","error","isConfirmed","userLogin","userInfo","isLoggedIn","setIsLoggedIn","params","token","setTimeout","push","localStorage","setItem","border","margin"],"mappings":"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","sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Card } from \"react-bootstrap\";\r\nimport Loader from \"../components/Loader\";\r\nimport Message from \"../components/Message\";\r\nimport { confirmUser } from \"../actions/userActions\";\r\nimport Meta from \"../components/Meta\";\r\n\r\nconst ConfirmPage = ({ match, history }) => {\r\n  const dispatch = useDispatch();\r\n  const userConfirm = useSelector((state) => state.userConfirm); // get the userInfo to check if user is confirmed or not\r\n  const { loading, error, isConfirmed } = userConfirm;\r\n\r\n  const userLogin = useSelector((state) => state.userLogin);\r\n  const { userInfo } = userLogin;\r\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (userInfo) {\r\n      setIsLoggedIn(true);\r\n    } else {\r\n      setIsLoggedIn(false);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // confirm user once the email token is available\r\n    dispatch(confirmUser(match.params.token, isLoggedIn));\r\n  }, [dispatch, match, isLoggedIn]);\r\n\r\n  if (loading || (!isConfirmed && !error)) {\r\n    return <Loader />;\r\n  } else if (error) {\r\n    // redirect to login page after a 10 seconds\r\n    setTimeout(() => {\r\n      history.push(\"/login\");\r\n    }, 10000);\r\n    return (\r\n      <Message dismissible variant=\"danger\" duration={10}>\r\n        Verfication Failed. Please try to login again.\r\n      </Message>\r\n    );\r\n  } else if (isConfirmed) {\r\n    // set a variable in local storage to fill email aftrer redirecting to login page after email confirmation\r\n    localStorage.setItem(\"fillEmailOnLoginPage\", \"true\");\r\n    return (\r\n      <Card style={{ border: \"none\", margin: \"0 auto\" }}>\r\n        <Meta title=\"Confirm Password | The Style Studio\" />\r\n        <Card.Body>\r\n          <Card.Title>Account Confirmed</Card.Title>\r\n          <Card.Text>\r\n            {setIsLoggedIn\r\n              ? \"Your account has been successfully verified! Go on and shop for the best deals of the day!\"\r\n              : `Your account has been successfully verified! Please\r\n\t\t\t\t\t\tlogin and start exploring the best deals on all your\r\n\t\t\t\t\t\tfavorite products.`}\r\n          </Card.Text>\r\n          {!setIsLoggedIn ? <Link to=\"/login\">Login</Link> : null}\r\n        </Card.Body>\r\n      </Card>\r\n    );\r\n  }\r\n};\r\n\r\nexport default ConfirmPage;\r\n"]},"metadata":{},"sourceType":"module"}