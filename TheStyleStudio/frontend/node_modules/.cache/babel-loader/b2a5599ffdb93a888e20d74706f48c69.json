{"ast":null,"code":"var _jsxFileName = \"/Users/vipinmamidi/NEU/2nd SEM/WEB D/FP/Thu/MERN-Ecommerce/Git_Copy/WebDesigning_FinalProject/TheStyleStudio/frontend/src/components/CheckoutForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Form, Button } from 'react-bootstrap';\nimport { payOrder } from '../actions/orderActions';\nimport { savePaymentMethod } from '../actions/cartActions';\nimport { CardElement, useStripe, useElements } from '@stripe/react-stripe-js'; // for stripe CC component\n\nimport Message from '../components/Message';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CheckoutForm = _ref => {\n  _s();\n\n  let {\n    price,\n    orderID\n  } = _ref;\n  const [error, setError] = useState(''); // from the stripe component itself\n\n  const dispatch = useDispatch();\n  const [clientSecret, setClientSecret] = useState(''); // from the payment intent sent from server\n\n  const stripe = useStripe();\n  const elements = useElements();\n  const userLogin = useSelector(state => state.userLogin);\n  const {\n    userInfo\n  } = userLogin; // STEP 1: create a payment intent and getting the secret\n\n  useEffect(() => {\n    const getClientSecret = async () => {\n      const {\n        data\n      } = await axios.post('/api/orders/stripe-payment', {\n        price,\n        email: userInfo.email\n      }, {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      setClientSecret(data.clientSecret);\n    };\n\n    if (userInfo && price) getClientSecret();\n  }, [price, userInfo]); // STEP 2: make the payment after filling the form properly\n\n  const makePayment = async e => {\n    e.preventDefault();\n\n    if (!stripe || !elements) {\n      // Stripe.js has not yet loaded.\n      // Make  sure to disable form submission until Stripe.js has loaded.\n      return;\n    }\n\n    if (clientSecret) {\n      const payload = await stripe.confirmCardPayment(clientSecret, {\n        payment_method: {\n          card: elements.getElement(CardElement),\n          billing_details: {\n            name: userInfo.name,\n            email: userInfo.email\n          }\n        }\n      }); // console.log(payload.error);\n\n      if (!payload.error) {\n        dispatch(savePaymentMethod('Stripe'));\n        dispatch(payOrder(orderID, { ...payload.paymentIntent,\n          paymentMode: 'stripe'\n        }));\n      } else {\n        setError(payload.error.message);\n      }\n    } else {\n      window.location.reload();\n    }\n  }; // render a checkout form for filling details about credit or debit cards\n\n\n  return /*#__PURE__*/_jsxDEV(Form, {\n    id: \"payment-form\",\n    onSubmit: makePayment,\n    children: [error && /*#__PURE__*/_jsxDEV(Message, {\n      dismissible: true,\n      variant: \"danger\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n      style: {\n        margin: '1em 0',\n        fontSize: '1em'\n      },\n      children: /*#__PURE__*/_jsxDEV(CardElement, {\n        options: {\n          style: {\n            base: {\n              fontSize: '16px',\n              color: '#424770',\n              '::placeholder': {\n                color: '#aab7c4'\n              }\n            },\n            invalid: {\n              color: '#9e2146'\n            }\n          }\n        },\n        id: \"card-element\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"d-grid\",\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        disabled: !stripe,\n        size: \"lg\",\n        type: \"submit\",\n        children: \"Pay Now\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 3\n  }, this);\n};\n\n_s(CheckoutForm, \"LQ0G+PWWLUagtfbHHohld4CpXXw=\", false, function () {\n  return [useDispatch, useStripe, useElements, useSelector];\n});\n\n_c = CheckoutForm;\nexport default CheckoutForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"CheckoutForm\");","map":{"version":3,"sources":["/Users/vipinmamidi/NEU/2nd SEM/WEB D/FP/Thu/MERN-Ecommerce/Git_Copy/WebDesigning_FinalProject/TheStyleStudio/frontend/src/components/CheckoutForm.js"],"names":["React","useState","useEffect","axios","useDispatch","useSelector","Form","Button","payOrder","savePaymentMethod","CardElement","useStripe","useElements","Message","CheckoutForm","price","orderID","error","setError","dispatch","clientSecret","setClientSecret","stripe","elements","userLogin","state","userInfo","getClientSecret","data","post","email","headers","makePayment","e","preventDefault","payload","confirmCardPayment","payment_method","card","getElement","billing_details","name","paymentIntent","paymentMode","message","window","location","reload","margin","fontSize","style","base","color","invalid"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Form, Button } from 'react-bootstrap';\r\nimport { payOrder } from '../actions/orderActions';\r\nimport { savePaymentMethod } from '../actions/cartActions';\r\nimport { CardElement, useStripe, useElements } from '@stripe/react-stripe-js'; // for stripe CC component\r\nimport Message from '../components/Message';\r\n\r\nconst CheckoutForm = ({ price, orderID }) => {\r\n\tconst [error, setError] = useState(''); // from the stripe component itself\r\n\tconst dispatch = useDispatch();\r\n\tconst [clientSecret, setClientSecret] = useState(''); // from the payment intent sent from server\r\n\tconst stripe = useStripe();\r\n\tconst elements = useElements();\r\n\r\n\tconst userLogin = useSelector((state) => state.userLogin);\r\n\tconst { userInfo } = userLogin;\r\n\r\n\t// STEP 1: create a payment intent and getting the secret\r\n\tuseEffect(() => {\r\n\t\tconst getClientSecret = async () => {\r\n\t\t\tconst { data } = await axios.post(\r\n\t\t\t\t'/api/orders/stripe-payment',\r\n\t\t\t\t{ price, email: userInfo.email },\r\n\t\t\t\t{\r\n\t\t\t\t\theaders: {\r\n\t\t\t\t\t\t'Content-Type': 'application/json',\r\n\t\t\t\t\t},\r\n\t\t\t\t}\r\n\t\t\t);\r\n\t\t\tsetClientSecret(data.clientSecret);\r\n\t\t};\r\n\r\n\t\tif (userInfo && price) getClientSecret();\r\n\t}, [price, userInfo]);\r\n\r\n\t// STEP 2: make the payment after filling the form properly\r\n\tconst makePayment = async (e) => {\r\n\t\te.preventDefault();\r\n\t\tif (!stripe || !elements) {\r\n\t\t\t// Stripe.js has not yet loaded.\r\n\t\t\t// Make  sure to disable form submission until Stripe.js has loaded.\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (clientSecret) {\r\n\t\t\tconst payload = await stripe.confirmCardPayment(clientSecret, {\r\n\t\t\t\tpayment_method: {\r\n\t\t\t\t\tcard: elements.getElement(CardElement),\r\n\t\t\t\t\tbilling_details: {\r\n\t\t\t\t\t\tname: userInfo.name,\r\n\t\t\t\t\t\temail: userInfo.email,\r\n\t\t\t\t\t},\r\n\t\t\t\t},\r\n\t\t\t});\r\n\t\t\t// console.log(payload.error);\r\n\t\t\tif (!payload.error) {\r\n\t\t\t\tdispatch(savePaymentMethod('Stripe'));\r\n\t\t\t\tdispatch(\r\n\t\t\t\t\tpayOrder(orderID, {\r\n\t\t\t\t\t\t...payload.paymentIntent,\r\n\t\t\t\t\t\tpaymentMode: 'stripe',\r\n\t\t\t\t\t})\r\n\t\t\t\t);\r\n\t\t\t} else {\r\n\t\t\t\tsetError(payload.error.message);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\twindow.location.reload();\r\n\t\t}\r\n\t};\r\n\r\n\t// render a checkout form for filling details about credit or debit cards\r\n\treturn (\r\n\t\t<Form id='payment-form' onSubmit={makePayment}>\r\n\t\t\t{error && (\r\n\t\t\t\t<Message dismissible variant='danger'>\r\n\t\t\t\t\t{error}\r\n\t\t\t\t</Message>\r\n\t\t\t)}\r\n\t\t\t<Form.Group\r\n\t\t\t\tstyle={{\r\n\t\t\t\t\tmargin: '1em 0',\r\n\t\t\t\t\tfontSize: '1em',\r\n\t\t\t\t}}>\r\n\t\t\t\t<CardElement\r\n\t\t\t\t\toptions={{\r\n\t\t\t\t\t\tstyle: {\r\n\t\t\t\t\t\t\tbase: {\r\n\t\t\t\t\t\t\t\tfontSize: '16px',\r\n\t\t\t\t\t\t\t\tcolor: '#424770',\r\n\t\t\t\t\t\t\t\t'::placeholder': {\r\n\t\t\t\t\t\t\t\t\tcolor: '#aab7c4',\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tinvalid: {\r\n\t\t\t\t\t\t\t\tcolor: '#9e2146',\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t}}\r\n\t\t\t\t\tid='card-element'\r\n\t\t\t\t/>\r\n\t\t\t</Form.Group>\r\n\t\t\t<div className='d-grid'>\r\n\t\t\t\t<Button disabled={!stripe} size='lg' type='submit'>\r\n\t\t\t\t\tPay Now\r\n\t\t\t\t</Button>\r\n\t\t\t</div>\r\n\t\t</Form>\r\n\t);\r\n};\r\n\r\nexport default CheckoutForm;\r\n"]},"metadata":{},"sourceType":"module"}