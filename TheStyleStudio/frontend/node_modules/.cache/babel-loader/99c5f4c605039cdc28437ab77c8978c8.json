{"ast":null,"code":"import _slicedToArray from\"/Users/riddhibhatti/Webdesign/WebDFinalProject/WebDesigning_FinalProject/TheStyleStudio/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";/* eslint-disable react-hooks/exhaustive-deps */import React,{useState,useEffect}from\"react\";import{useSelector,useDispatch}from\"react-redux\";import{Link}from\"react-router-dom\";import{Card}from\"react-bootstrap\";import Loader from\"../components/Loader\";import Message from\"../components/Message\";import{confirmUser}from\"../actions/userActions\";import Meta from\"../components/Meta\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var ConfirmPage=function ConfirmPage(_ref){var match=_ref.match,history=_ref.history;var dispatch=useDispatch();var userConfirm=useSelector(function(state){return state.userConfirm;});// get the userInfo to check if user is confirmed or not\nvar loading=userConfirm.loading,error=userConfirm.error,isConfirmed=userConfirm.isConfirmed;var userLogin=useSelector(function(state){return state.userLogin;});var userInfo=userLogin.userInfo;var _useState=useState(false),_useState2=_slicedToArray(_useState,2),isLoggedIn=_useState2[0],setIsLoggedIn=_useState2[1];useEffect(function(){if(userInfo){setIsLoggedIn(true);}else{setIsLoggedIn(false);}},[]);useEffect(function(){// confirm user once the email token is available\ndispatch(confirmUser(match.params.token,isLoggedIn));},[dispatch,match,isLoggedIn]);if(loading||!isConfirmed&&!error){return/*#__PURE__*/_jsx(Loader,{});}else if(error){// redirect to login page after a 10 seconds\nsetTimeout(function(){history.push(\"/login\");},10000);return/*#__PURE__*/_jsx(Message,{dismissible:true,variant:\"danger\",duration:10,children:\"Verfication Failed. Please try to login again.\"});}else if(isConfirmed){// set a variable in local storage to fill email aftrer redirecting to login page after email confirmation\nlocalStorage.setItem(\"fillEmailOnLoginPage\",\"true\");return/*#__PURE__*/_jsxs(Card,{style:{border:\"none\",margin:\"0 auto\"},children:[/*#__PURE__*/_jsx(Meta,{title:\"Confirm Password | The Style Studio\"}),/*#__PURE__*/_jsxs(Card.Body,{children:[/*#__PURE__*/_jsx(Card.Title,{children:\"Account Confirmed\"}),/*#__PURE__*/_jsx(Card.Text,{children:setIsLoggedIn?\"Your account has been successfully verified! Go on and shop for the best deals of the day!\":\"Your account has been successfully verified! Please\\n\\t\\t\\t\\t\\t\\tlogin and start exploring the best deals on all your\\n\\t\\t\\t\\t\\t\\tfavorite products.\"}),!setIsLoggedIn?/*#__PURE__*/_jsx(Link,{to:\"/login\",children:\"Login\"}):null]})]});}};export default ConfirmPage;","map":{"version":3,"sources":["/Users/riddhibhatti/Webdesign/WebDFinalProject/WebDesigning_FinalProject/TheStyleStudio/frontend/src/pages/ConfirmPage.js"],"names":["React","useState","useEffect","useSelector","useDispatch","Link","Card","Loader","Message","confirmUser","Meta","ConfirmPage","match","history","dispatch","userConfirm","state","loading","error","isConfirmed","userLogin","userInfo","isLoggedIn","setIsLoggedIn","params","token","setTimeout","push","localStorage","setItem","border","margin"],"mappings":"6KAAA,gDACA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,SAA1B,KAA2C,OAA3C,CACA,OAASC,WAAT,CAAsBC,WAAtB,KAAyC,aAAzC,CACA,OAASC,IAAT,KAAqB,kBAArB,CACA,OAASC,IAAT,KAAqB,iBAArB,CACA,MAAOC,CAAAA,MAAP,KAAmB,sBAAnB,CACA,MAAOC,CAAAA,OAAP,KAAoB,uBAApB,CACA,OAASC,WAAT,KAA4B,wBAA5B,CACA,MAAOC,CAAAA,IAAP,KAAiB,oBAAjB,C,wFAEA,GAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,MAAwB,IAArBC,CAAAA,KAAqB,MAArBA,KAAqB,CAAdC,OAAc,MAAdA,OAAc,CAC1C,GAAMC,CAAAA,QAAQ,CAAGV,WAAW,EAA5B,CACA,GAAMW,CAAAA,WAAW,CAAGZ,WAAW,CAAC,SAACa,KAAD,QAAWA,CAAAA,KAAK,CAACD,WAAjB,EAAD,CAA/B,CAA+D;AAC/D,GAAQE,CAAAA,OAAR,CAAwCF,WAAxC,CAAQE,OAAR,CAAiBC,KAAjB,CAAwCH,WAAxC,CAAiBG,KAAjB,CAAwBC,WAAxB,CAAwCJ,WAAxC,CAAwBI,WAAxB,CAEA,GAAMC,CAAAA,SAAS,CAAGjB,WAAW,CAAC,SAACa,KAAD,QAAWA,CAAAA,KAAK,CAACI,SAAjB,EAAD,CAA7B,CACA,GAAQC,CAAAA,QAAR,CAAqBD,SAArB,CAAQC,QAAR,CACA,cAAoCpB,QAAQ,CAAC,KAAD,CAA5C,wCAAOqB,UAAP,eAAmBC,aAAnB,eAEArB,SAAS,CAAC,UAAM,CACd,GAAImB,QAAJ,CAAc,CACZE,aAAa,CAAC,IAAD,CAAb,CACD,CAFD,IAEO,CACLA,aAAa,CAAC,KAAD,CAAb,CACD,CACF,CANQ,CAMN,EANM,CAAT,CAQArB,SAAS,CAAC,UAAM,CACd;AACAY,QAAQ,CAACL,WAAW,CAACG,KAAK,CAACY,MAAN,CAAaC,KAAd,CAAqBH,UAArB,CAAZ,CAAR,CACD,CAHQ,CAGN,CAACR,QAAD,CAAWF,KAAX,CAAkBU,UAAlB,CAHM,CAAT,CAKA,GAAIL,OAAO,EAAK,CAACE,WAAD,EAAgB,CAACD,KAAjC,CAAyC,CACvC,mBAAO,KAAC,MAAD,IAAP,CACD,CAFD,IAEO,IAAIA,KAAJ,CAAW,CAChB;AACAQ,UAAU,CAAC,UAAM,CACfb,OAAO,CAACc,IAAR,CAAa,QAAb,EACD,CAFS,CAEP,KAFO,CAAV,CAGA,mBACE,KAAC,OAAD,EAAS,WAAW,KAApB,CAAqB,OAAO,CAAC,QAA7B,CAAsC,QAAQ,CAAE,EAAhD,4DADF,CAKD,CAVM,IAUA,IAAIR,WAAJ,CAAiB,CACtB;AACAS,YAAY,CAACC,OAAb,CAAqB,sBAArB,CAA6C,MAA7C,EACA,mBACE,MAAC,IAAD,EAAM,KAAK,CAAE,CAAEC,MAAM,CAAE,MAAV,CAAkBC,MAAM,CAAE,QAA1B,CAAb,wBACE,KAAC,IAAD,EAAM,KAAK,CAAC,qCAAZ,EADF,cAEE,MAAC,IAAD,CAAM,IAAN,yBACE,KAAC,IAAD,CAAM,KAAN,gCADF,cAEE,KAAC,IAAD,CAAM,IAAN,WACGR,aAAa,CACV,4FADU,wJADhB,EAFF,CASG,CAACA,aAAD,cAAiB,KAAC,IAAD,EAAM,EAAE,CAAC,QAAT,mBAAjB,CAAkD,IATrD,GAFF,GADF,CAgBD,CACF,CAtDD,CAwDA,cAAeZ,CAAAA,WAAf","sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Card } from \"react-bootstrap\";\r\nimport Loader from \"../components/Loader\";\r\nimport Message from \"../components/Message\";\r\nimport { confirmUser } from \"../actions/userActions\";\r\nimport Meta from \"../components/Meta\";\r\n\r\nconst ConfirmPage = ({ match, history }) => {\r\n  const dispatch = useDispatch();\r\n  const userConfirm = useSelector((state) => state.userConfirm); // get the userInfo to check if user is confirmed or not\r\n  const { loading, error, isConfirmed } = userConfirm;\r\n\r\n  const userLogin = useSelector((state) => state.userLogin);\r\n  const { userInfo } = userLogin;\r\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (userInfo) {\r\n      setIsLoggedIn(true);\r\n    } else {\r\n      setIsLoggedIn(false);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // confirm user once the email token is available\r\n    dispatch(confirmUser(match.params.token, isLoggedIn));\r\n  }, [dispatch, match, isLoggedIn]);\r\n\r\n  if (loading || (!isConfirmed && !error)) {\r\n    return <Loader />;\r\n  } else if (error) {\r\n    // redirect to login page after a 10 seconds\r\n    setTimeout(() => {\r\n      history.push(\"/login\");\r\n    }, 10000);\r\n    return (\r\n      <Message dismissible variant=\"danger\" duration={10}>\r\n        Verfication Failed. Please try to login again.\r\n      </Message>\r\n    );\r\n  } else if (isConfirmed) {\r\n    // set a variable in local storage to fill email aftrer redirecting to login page after email confirmation\r\n    localStorage.setItem(\"fillEmailOnLoginPage\", \"true\");\r\n    return (\r\n      <Card style={{ border: \"none\", margin: \"0 auto\" }}>\r\n        <Meta title=\"Confirm Password | The Style Studio\" />\r\n        <Card.Body>\r\n          <Card.Title>Account Confirmed</Card.Title>\r\n          <Card.Text>\r\n            {setIsLoggedIn\r\n              ? \"Your account has been successfully verified! Go on and shop for the best deals of the day!\"\r\n              : `Your account has been successfully verified! Please\r\n\t\t\t\t\t\tlogin and start exploring the best deals on all your\r\n\t\t\t\t\t\tfavorite products.`}\r\n          </Card.Text>\r\n          {!setIsLoggedIn ? <Link to=\"/login\">Login</Link> : null}\r\n        </Card.Body>\r\n      </Card>\r\n    );\r\n  }\r\n};\r\n\r\nexport default ConfirmPage;\r\n"]},"metadata":{},"sourceType":"module"}