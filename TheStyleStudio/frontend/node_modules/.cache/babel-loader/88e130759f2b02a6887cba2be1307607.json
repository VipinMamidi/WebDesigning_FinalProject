{"ast":null,"code":"import axios from 'axios';\nimport { CART_ADD_ITEM, CART_REMOVE_ITEM, CART_SAVE_SHIPPING_ADDRESS, CART_SAVE_PAYMENT_METHOD } from '../constants/cartConstants'; // get the product id and the quantity of the item to add to the cart\n\nexport const addItem = (id, qty) => async (dispatch, getState) => {\n  try {\n    const {\n      data\n    } = await axios.get(`/api/products/${id}`);\n    dispatch({\n      type: CART_ADD_ITEM,\n      payload: {\n        product: data._id,\n        name: data.name,\n        image: data.image,\n        price: data.price,\n        countInStock: data.countInStock,\n        qty\n      }\n    }); // update the local storage with the new cart\n\n    localStorage.setItem('cartItems', JSON.stringify(getState().cart.cartItems));\n  } catch (error) {\n    console.error(error);\n  }\n}; // get the product id to be removed from the cart\n\nexport const removeItem = id => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: CART_REMOVE_ITEM,\n      payload: id\n    }); // update the local storage with the updated cart\n\n    localStorage.setItem('cartItems', JSON.stringify(getState().cart.cartItems));\n  } catch (error) {\n    console.log(error);\n  }\n}; // get the shipping address data and dispatch corresponding action\n\nexport const saveShippingAddress = data => async dispatch => {\n  try {\n    dispatch({\n      type: CART_SAVE_SHIPPING_ADDRESS,\n      payload: data\n    });\n    localStorage.setItem('shippingAddress', JSON.stringify(data));\n  } catch (error) {\n    console.log(error);\n  }\n}; // get the option for payment and update the local storage as well\n\nexport const savePaymentMethod = data => async dispatch => {\n  try {\n    dispatch({\n      type: CART_SAVE_PAYMENT_METHOD,\n      payload: data\n    });\n    localStorage.setItem('paymentMethod', JSON.stringify(data));\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"sources":["/Users/vipinmamidi/NEU/2nd SEM/WEB D/FP/Thu/MERN-Ecommerce/MERN-Ecommerce/frontend/src/actions/cartActions.js"],"names":["axios","CART_ADD_ITEM","CART_REMOVE_ITEM","CART_SAVE_SHIPPING_ADDRESS","CART_SAVE_PAYMENT_METHOD","addItem","id","qty","dispatch","getState","data","get","type","payload","product","_id","name","image","price","countInStock","localStorage","setItem","JSON","stringify","cart","cartItems","error","console","removeItem","log","saveShippingAddress","savePaymentMethod"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SACCC,aADD,EAECC,gBAFD,EAGCC,0BAHD,EAICC,wBAJD,QAKO,4BALP,C,CAOA;;AACA,OAAO,MAAMC,OAAO,GAAG,CAACC,EAAD,EAAKC,GAAL,KAAa,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;AACjE,MAAI;AACH,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMV,KAAK,CAACW,GAAN,CAAW,iBAAgBL,EAAG,EAA9B,CAAvB;AACAE,IAAAA,QAAQ,CAAC;AACRI,MAAAA,IAAI,EAAEX,aADE;AAERY,MAAAA,OAAO,EAAE;AACRC,QAAAA,OAAO,EAAEJ,IAAI,CAACK,GADN;AAERC,QAAAA,IAAI,EAAEN,IAAI,CAACM,IAFH;AAGRC,QAAAA,KAAK,EAAEP,IAAI,CAACO,KAHJ;AAIRC,QAAAA,KAAK,EAAER,IAAI,CAACQ,KAJJ;AAKRC,QAAAA,YAAY,EAAET,IAAI,CAACS,YALX;AAMRZ,QAAAA;AANQ;AAFD,KAAD,CAAR,CAFG,CAcH;;AACAa,IAAAA,YAAY,CAACC,OAAb,CACC,WADD,EAECC,IAAI,CAACC,SAAL,CAAed,QAAQ,GAAGe,IAAX,CAAgBC,SAA/B,CAFD;AAIA,GAnBD,CAmBE,OAAOC,KAAP,EAAc;AACfC,IAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACA;AACD,CAvBM,C,CAyBP;;AACA,OAAO,MAAME,UAAU,GAAItB,EAAD,IAAQ,OAAOE,QAAP,EAAiBC,QAAjB,KAA8B;AAC/D,MAAI;AACHD,IAAAA,QAAQ,CAAC;AACRI,MAAAA,IAAI,EAAEV,gBADE;AAERW,MAAAA,OAAO,EAAEP;AAFD,KAAD,CAAR,CADG,CAKH;;AACAc,IAAAA,YAAY,CAACC,OAAb,CACC,WADD,EAECC,IAAI,CAACC,SAAL,CAAed,QAAQ,GAAGe,IAAX,CAAgBC,SAA/B,CAFD;AAIA,GAVD,CAUE,OAAOC,KAAP,EAAc;AACfC,IAAAA,OAAO,CAACE,GAAR,CAAYH,KAAZ;AACA;AACD,CAdM,C,CAgBP;;AACA,OAAO,MAAMI,mBAAmB,GAAIpB,IAAD,IAAU,MAAOF,QAAP,IAAoB;AAChE,MAAI;AACHA,IAAAA,QAAQ,CAAC;AACRI,MAAAA,IAAI,EAAET,0BADE;AAERU,MAAAA,OAAO,EAAEH;AAFD,KAAD,CAAR;AAIAU,IAAAA,YAAY,CAACC,OAAb,CAAqB,iBAArB,EAAwCC,IAAI,CAACC,SAAL,CAAeb,IAAf,CAAxC;AACA,GAND,CAME,OAAOgB,KAAP,EAAc;AACfC,IAAAA,OAAO,CAACE,GAAR,CAAYH,KAAZ;AACA;AACD,CAVM,C,CAYP;;AACA,OAAO,MAAMK,iBAAiB,GAAIrB,IAAD,IAAU,MAAOF,QAAP,IAAoB;AAC9D,MAAI;AACHA,IAAAA,QAAQ,CAAC;AACRI,MAAAA,IAAI,EAAER,wBADE;AAERS,MAAAA,OAAO,EAAEH;AAFD,KAAD,CAAR;AAIAU,IAAAA,YAAY,CAACC,OAAb,CAAqB,eAArB,EAAsCC,IAAI,CAACC,SAAL,CAAeb,IAAf,CAAtC;AACA,GAND,CAME,OAAOgB,KAAP,EAAc;AACfC,IAAAA,OAAO,CAACE,GAAR,CAAYH,KAAZ;AACA;AACD,CAVM","sourcesContent":["import axios from 'axios';\r\nimport {\r\n\tCART_ADD_ITEM,\r\n\tCART_REMOVE_ITEM,\r\n\tCART_SAVE_SHIPPING_ADDRESS,\r\n\tCART_SAVE_PAYMENT_METHOD,\r\n} from '../constants/cartConstants';\r\n\r\n// get the product id and the quantity of the item to add to the cart\r\nexport const addItem = (id, qty) => async (dispatch, getState) => {\r\n\ttry {\r\n\t\tconst { data } = await axios.get(`/api/products/${id}`);\r\n\t\tdispatch({\r\n\t\t\ttype: CART_ADD_ITEM,\r\n\t\t\tpayload: {\r\n\t\t\t\tproduct: data._id,\r\n\t\t\t\tname: data.name,\r\n\t\t\t\timage: data.image,\r\n\t\t\t\tprice: data.price,\r\n\t\t\t\tcountInStock: data.countInStock,\r\n\t\t\t\tqty,\r\n\t\t\t},\r\n\t\t});\r\n\r\n\t\t// update the local storage with the new cart\r\n\t\tlocalStorage.setItem(\r\n\t\t\t'cartItems',\r\n\t\t\tJSON.stringify(getState().cart.cartItems)\r\n\t\t);\r\n\t} catch (error) {\r\n\t\tconsole.error(error);\r\n\t}\r\n};\r\n\r\n// get the product id to be removed from the cart\r\nexport const removeItem = (id) => async (dispatch, getState) => {\r\n\ttry {\r\n\t\tdispatch({\r\n\t\t\ttype: CART_REMOVE_ITEM,\r\n\t\t\tpayload: id,\r\n\t\t});\r\n\t\t// update the local storage with the updated cart\r\n\t\tlocalStorage.setItem(\r\n\t\t\t'cartItems',\r\n\t\t\tJSON.stringify(getState().cart.cartItems)\r\n\t\t);\r\n\t} catch (error) {\r\n\t\tconsole.log(error);\r\n\t}\r\n};\r\n\r\n// get the shipping address data and dispatch corresponding action\r\nexport const saveShippingAddress = (data) => async (dispatch) => {\r\n\ttry {\r\n\t\tdispatch({\r\n\t\t\ttype: CART_SAVE_SHIPPING_ADDRESS,\r\n\t\t\tpayload: data,\r\n\t\t});\r\n\t\tlocalStorage.setItem('shippingAddress', JSON.stringify(data));\r\n\t} catch (error) {\r\n\t\tconsole.log(error);\r\n\t}\r\n};\r\n\r\n// get the option for payment and update the local storage as well\r\nexport const savePaymentMethod = (data) => async (dispatch) => {\r\n\ttry {\r\n\t\tdispatch({\r\n\t\t\ttype: CART_SAVE_PAYMENT_METHOD,\r\n\t\t\tpayload: data,\r\n\t\t});\r\n\t\tlocalStorage.setItem('paymentMethod', JSON.stringify(data));\r\n\t} catch (error) {\r\n\t\tconsole.log(error);\r\n\t}\r\n};\r\n"]},"metadata":{},"sourceType":"module"}